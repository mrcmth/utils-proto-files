// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/conversation.proto

package conversation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GestionConversation_CreateConversation_FullMethodName  = "/conversation.gestion_conversation/CreateConversation"
	GestionConversation_DeleteConversation_FullMethodName  = "/conversation.gestion_conversation/DeleteConversation"
	GestionConversation_UpdateConversation_FullMethodName  = "/conversation.gestion_conversation/UpdateConversation"
	GestionConversation_GetConversationById_FullMethodName = "/conversation.gestion_conversation/GetConversationById"
)

// GestionConversationClient is the client API for GestionConversation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GestionConversationClient interface {
	CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*CreateConversationReply, error)
	DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...grpc.CallOption) (*DeleteConversationReply, error)
	UpdateConversation(ctx context.Context, in *UpdateConversationRequest, opts ...grpc.CallOption) (*UpdateConversationReply, error)
	GetConversationById(ctx context.Context, in *ConversationIdRequest, opts ...grpc.CallOption) (*ConversationIdResponse, error)
}

type gestionConversationClient struct {
	cc grpc.ClientConnInterface
}

func NewGestionConversationClient(cc grpc.ClientConnInterface) GestionConversationClient {
	return &gestionConversationClient{cc}
}

func (c *gestionConversationClient) CreateConversation(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*CreateConversationReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateConversationReply)
	err := c.cc.Invoke(ctx, GestionConversation_CreateConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gestionConversationClient) DeleteConversation(ctx context.Context, in *DeleteConversationRequest, opts ...grpc.CallOption) (*DeleteConversationReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteConversationReply)
	err := c.cc.Invoke(ctx, GestionConversation_DeleteConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gestionConversationClient) UpdateConversation(ctx context.Context, in *UpdateConversationRequest, opts ...grpc.CallOption) (*UpdateConversationReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateConversationReply)
	err := c.cc.Invoke(ctx, GestionConversation_UpdateConversation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gestionConversationClient) GetConversationById(ctx context.Context, in *ConversationIdRequest, opts ...grpc.CallOption) (*ConversationIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConversationIdResponse)
	err := c.cc.Invoke(ctx, GestionConversation_GetConversationById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GestionConversationServer is the server API for GestionConversation service.
// All implementations must embed UnimplementedGestionConversationServer
// for forward compatibility.
type GestionConversationServer interface {
	CreateConversation(context.Context, *CreateConversationRequest) (*CreateConversationReply, error)
	DeleteConversation(context.Context, *DeleteConversationRequest) (*DeleteConversationReply, error)
	UpdateConversation(context.Context, *UpdateConversationRequest) (*UpdateConversationReply, error)
	GetConversationById(context.Context, *ConversationIdRequest) (*ConversationIdResponse, error)
	mustEmbedUnimplementedGestionConversationServer()
}

// UnimplementedGestionConversationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGestionConversationServer struct{}

func (UnimplementedGestionConversationServer) CreateConversation(context.Context, *CreateConversationRequest) (*CreateConversationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConversation not implemented")
}
func (UnimplementedGestionConversationServer) DeleteConversation(context.Context, *DeleteConversationRequest) (*DeleteConversationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConversation not implemented")
}
func (UnimplementedGestionConversationServer) UpdateConversation(context.Context, *UpdateConversationRequest) (*UpdateConversationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConversation not implemented")
}
func (UnimplementedGestionConversationServer) GetConversationById(context.Context, *ConversationIdRequest) (*ConversationIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversationById not implemented")
}
func (UnimplementedGestionConversationServer) mustEmbedUnimplementedGestionConversationServer() {}
func (UnimplementedGestionConversationServer) testEmbeddedByValue()                             {}

// UnsafeGestionConversationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GestionConversationServer will
// result in compilation errors.
type UnsafeGestionConversationServer interface {
	mustEmbedUnimplementedGestionConversationServer()
}

func RegisterGestionConversationServer(s grpc.ServiceRegistrar, srv GestionConversationServer) {
	// If the following call pancis, it indicates UnimplementedGestionConversationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GestionConversation_ServiceDesc, srv)
}

func _GestionConversation_CreateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GestionConversationServer).CreateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GestionConversation_CreateConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GestionConversationServer).CreateConversation(ctx, req.(*CreateConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GestionConversation_DeleteConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GestionConversationServer).DeleteConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GestionConversation_DeleteConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GestionConversationServer).DeleteConversation(ctx, req.(*DeleteConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GestionConversation_UpdateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GestionConversationServer).UpdateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GestionConversation_UpdateConversation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GestionConversationServer).UpdateConversation(ctx, req.(*UpdateConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GestionConversation_GetConversationById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GestionConversationServer).GetConversationById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GestionConversation_GetConversationById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GestionConversationServer).GetConversationById(ctx, req.(*ConversationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GestionConversation_ServiceDesc is the grpc.ServiceDesc for GestionConversation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GestionConversation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "conversation.gestion_conversation",
	HandlerType: (*GestionConversationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConversation",
			Handler:    _GestionConversation_CreateConversation_Handler,
		},
		{
			MethodName: "DeleteConversation",
			Handler:    _GestionConversation_DeleteConversation_Handler,
		},
		{
			MethodName: "UpdateConversation",
			Handler:    _GestionConversation_UpdateConversation_Handler,
		},
		{
			MethodName: "GetConversationById",
			Handler:    _GestionConversation_GetConversationById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/conversation.proto",
}
